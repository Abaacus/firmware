CC=arm-none-eabi-gcc
HEX=arm-none-eabi-objcopy

RM=rm -rf

SRC_DIR = Src
BIN_BASE_DIR = Bin
DRIVER_DIR = Drivers
DRIVER_HAL_DIR = $(DRIVER_DIR)/STM32F7xx_HAL_Driver
COMMON_LIB_DIR = common-all
COMMON_F7_LIB_DIR = common-all/f7

MIDDLEWARE_DIR = Middlewares
FREERTOS_DIR = $(MIDDLEWARE_DIR)/Third_Party/FreeRTOS


GEN_DIR = Gen
GEN_INC_DIR = $(GEN_DIR)/Inc
GEN_SRC_DIR = $(GEN_DIR)/Src

ELF_FILE = $(BINARY_BASE_NAME).elf
BIN_FILE = $(BINARY_BASE_NAME).bin
MAP_FILE = $(BINARY_BASE_NAME).map

DEPDIR := .d
$(shell mkdir -p $(DEPDIR) >/dev/null)
DEPFLAGS = -MT $@ -MMD -MP -MF $(DEPDIR)/$*.Td


INCLUDE_DIRS= $(COMMON_LIB_DIR)/Inc \
			  $(DRIVER_HAL_DIR)/f7/Inc \
			  $(DRIVER_HAL_DIR)/Inc \
			  $(DRIVER_DIR)/CMSIS/Device/ST/STM32F7xx/Include \
			  $(DRIVER_DIR)/CMSIS/Include \
			  Inc \
			  $(FREERTOS_DIR)/Source/include \
			  $(FREERTOS_DIR)/Source/portable/GCC/ARM_CM7/r0p1 \
			  $(FREERTOS_DIR)/Source/CMSIS_RTOS \
			  $(GEN_INC_DIR)

INCLUDE_FLAGS := $(addprefix -I,$(INCLUDE_DIRS))


DEFINES := "USE_HAL_DRIVER" "STM32F767xx" BOARD_NAME=$(BOARD_NAME)
DEFINE_FLAGS := $(addprefix -D,$(DEFINES))

ifeq '$(strip $(BOARD_TYPE))' '$(strip NUCLEO-F7)'
	LINK_SCRIPT="STM32F767ZITx_FLASH.ld"
else ifeq '$(strip $(BOARD_TYPE))' '$(strip F7)'
	LINK_SCRIPT="STM32F767VITx_FLASH.ld"
else
	$(error Unsupported Board type)
endif

CPU = -mcpu=cortex-m7

FPU = -mfpu=fpv5-d16

FLOAT_ABI = -mfloat-abi=hard

MCU = $(CPU) -mthumb $(FPU) $(FLOAT_ABI)

# -l is to link a library
#  -lc links libc.a, the c std lib
#  -lnosys links libnosys.a, has some stubbed system calls?
#  -lm links libm.a, the math library
#  -mthumb selects the thumb instruction set
#  -mcpu=cortex-m7 selects the cortex-m7 processor
#  -Wl--gc-sections passes --gc-sections to the linker, which means it only links used data and functions, and discards the rest
#  -T specifies the link script to use
#  -static On systems that support dynamic linking, this prevents linking with the shared libraries. On other systems, this option has no effect.
#  -Wl,--start-group -m -Wl,--end-group creates a group that is searched repeatedly for circular dependencies until no new undefined references are created
#  --cref, Output a cross reference table. If a linker map file is being generated, the cross reference table is printed to the map file
# -Wl,--defsym=malloc_getpagesize_P=0x1000, set the default page size of malloc to 0x1000, which means the heap increases in size by 4096 bytes at a time
LINKER_FLAGS=-lc -lnosys -lm  -Wl,--gc-sections -T$(LINK_SCRIPT) -static  -Wl,--start-group -lm -Wl,--end-group -Wl,-cref "-Wl,-Map=$(MAP_FILE_PATH)" -Wl,--defsym=malloc_getpagesize_P=0x1000 $(MCU)

DEBUG_FLAGS=-g -O2
COMMON_FLAGS=-c $(DEBUG_FLAGS) -std=gnu99 -Wall $(MCU)
ASSEMBLER_FLAGS=$(COMMON_FLAGS) -x assembler-with-cpp

# -ffunction-sections and -fdata-sections, Place each function or data item into its own section in the output file
#  This is to allow linking only used functions and data
COMPILER_FLAGS=$(COMMON_FLAGS) -ffunction-sections -fdata-sections $(DEFINE_FLAGS) -Werror $(DEPFLAGS)
POSTCOMPILE = @mv -f $(DEPDIR)/$*.Td $(DEPDIR)/$*.d && touch $@

SRC := $(wildcard $(SRC_DIR)/*.c) \
	   $(wildcard $(DRIVER_HAL_DIR)/Src/*.c) \
	   $(wildcard $(FREERTOS_DIR)/Source/*.c) \
	   $(wildcard $(FREERTOS_DIR)/Source/portable/GCC/ARM_CM7/r0p1/*.c) \
	   $(addprefix $(COMMON_LIB_DIR)/Src/, $(COMMON_LIB_SRC)) \
	   $(addprefix $(COMMON_F7_LIB_DIR)/Src/, $(COMMON_F7_LIB_SRC)) \
	   $(FREERTOS_DIR)/Source/portable/MemMang/heap_4.c \
	   $(wildcard $(FREERTOS_DIR)/Source/CMSIS_RTOS/*.c) \
	   $(SRC_DIR)/system_stm32f7xx.c \
	   $(GEN_SRC_DIR)/$(BOARD_NAME)_can.c

SRC := $(filter-out $(DRIVER_HAL_DIR)/Src/stm32f7xx_hal_timebase_rtc_alarm_template.c, $(SRC))
SRC := $(filter-out $(DRIVER_HAL_DIR)/Src/stm32f7xx_hal_timebase_rtc_wakeup_template.c, $(SRC))
SRC := $(filter-out $(DRIVER_HAL_DIR)/Src/stm32f7xx_hal_msp_template.c, $(SRC))
SRC := $(filter-out $(DRIVER_HAL_DIR)/Src/stm32f7xx_hal_timebase_tim_template.c, $(SRC))

SRCASM := startup_stm32f767xx.s

OBJS = $(SRC:%.c=$(BIN_DIR)/%.o) $(SRCASM:%.s=$(BIN_DIR)/%.o)

######################################
# Autogenerated code depedency files
######################################
SCRIPTS_DIR = $(COMMON_LIB_DIR)/Scripts
CAN_FILES_GEN_SCRIPT = $(SCRIPTS_DIR)/generateCanHeadder.py
DTC_FILES_GEN_SCRIPT = $(SCRIPTS_DIR)/generateDTC.py

GEN_DIR = Gen
GEN_DEPS = $(GEN_DIR)/dtc.d $(GEN_DIR)/canGen.d

###
#
# Release Build Settings
#
###

RELEASE_BIN_DIR = $(BIN_BASE_DIR)/Release
DEBUG_FLAGS=-g -O2

RELEASE_BIN_FILE = $(RELEASE_BIN_DIR)/$(BIN_FILE)
RELEASE_ELF_FILE = $(RELEASE_BIN_DIR)/$(ELF_FILE)
RELEASE_MAP_FILE = $(RELEASE_BIN_DIR)/$(MAP_FILE)
RELEASE_OBJS = $(SRC:%.c=$(RELEASE_BIN_DIR)/%.o) $(SRCASM:%.s=$(RELEASE_BIN_DIR)/%.o)

###
#
# Debug Build Settings
#
###

DEBUG_BIN_DIR = $(BIN_BASE_DIR)/Debug
DEBUG_FLAGS=-g -Og

DEBUG_BIN_FILE = $(DEBUG_BIN_DIR)/$(BIN_FILE)
DEBUG_ELF_FILE = $(DEBUG_BIN_DIR)/$(ELF_FILE)
DEBUG_MAP_FILE = $(DEBUG_BIN_DIR)/$(MAP_FILE)
DEBUG_OBJS = $(SRC:%.c=$(DEBUG_BIN_DIR)/%.o) $(SRCASM:%.s=$(DEBUG_BIN_DIR)/%.o)

.PHONY: clean test all debug release

#
# Default build
#
all: release

#
# Release target
#

release: BIN_DIR = $(RELEASE_BIN_DIR)
release: MAP_FILE_PATH = $(RELEASE_MAP_FILE)
release: BIN_FILE_PATH = $(RELEASE_BIN_FILE)
release: ELF_FILE_PATH = $(RELEASE_ELF_FILE)
release: $(RELEASE_BIN_FILE)

$(RELEASE_BIN_FILE): $(RELEASE_ELF_FILE)
	$(HEX) -O binary "$<" "$@"

$(RELEASE_ELF_FILE): $(RELEASE_OBJS)
	$(CC) $^ $(LINKER_FLAGS) -o $@

$(RELEASE_BIN_DIR)/%.o: %.c | $(GEN_DEPS)
	@mkdir -p $(dir $@)
	@mkdir -p $(dir $(DEPDIR)/$^)
	$(CC) $(COMPILER_FLAGS) $(INCLUDE_FLAGS) $< -o $@
	$(POSTCOMPILE)

$(RELEASE_BIN_DIR)/%.o: %.s
	@mkdir -p $(dir $@)
	$(CC) $(ASSEMBLER_FLAGS) $(INCLUDE_FLAGS) $< -o $@

$(RELEASE_BIN_DIR)/%.o: %.S
	@mkdir -p $(dir $@)
	$(CC) $(ASSEMBLER_FLAGS) $(INCLUDE_FLAGS) $< -o $@

#
# Debug target
#

debug: BIN_DIR = $(DEBUG_BIN_DIR)
debug: MAP_FILE_PATH = $(DEBUG_MAP_FILE)
debug: BIN_FILE_PATH = $(DEBUG_BIN_FILE)
debug: ELF_FILE_PATH = $(DEBUG_ELF_FILE)
debug: $(DEBUG_BIN_FILE)

$(DEBUG_BIN_FILE): $(DEBUG_ELF_FILE)
	$(HEX) -O binary "$<" "$@"

$(DEBUG_ELF_FILE): $(DEBUG_OBJS)
	$(CC) $^ $(LINKER_FLAGS) -o $@

$(DEBUG_BIN_DIR)/%.o: %.c | $(GEN_DEPS)
	@mkdir -p $(dir $@)
	@mkdir -p $(dir $(DEPDIR)/$^)
	$(CC) $(COMPILER_FLAGS) $(INCLUDE_FLAGS) $< -o $@
	$(POSTCOMPILE)

$(DEBUG_BIN_DIR)/%.o: %.s
	@mkdir -p $(dir $@)
	$(CC) $(ASSEMBLER_FLAGS) $(INCLUDE_FLAGS) $< -o $@

$(DEBUG_BIN_DIR)/%.o: %.S
	@mkdir -p $(dir $@)
	$(CC) $(ASSEMBLER_FLAGS) $(INCLUDE_FLAGS) $< -o $@

load: release
	openocd -f interface/stlink-v2-1.cfg -f target/stm32f7x.cfg -c init -c "reset halt" -c halt -c "flash write_image erase $(RELEASE_BIN_FILE) 0x8000000" -c "verify_image $(RELEASE_BIN_FILE) 0x8000000" -c "reset run" -c shutdown

load-debug: debug
	openocd -f interface/stlink-v2-1.cfg -f target/stm32f7x.cfg -c init -c "reset halt" -c halt -c "flash write_image erase $(DEBUG_BIN_FILE) 0x8000000" -c "verify_image $(DEBUG_BIN_FILE) 0x8000000" -c "reset run" -c shutdown

connect: debug
	openocd -f interface/stlink-v2-1.cfg -f target/stm32f7x.cfg -c init -c "reset halt" -c halt &
#=======
#load: release
	## this is stand alone stlink
	## openocd -f interface/stlink-v2.cfg -f target/stm32f7x_stlink.cfg -c init -c "reset init" -c halt -c "flash write_image erase $(RELEASE_BIN_FILE) 0x08000000" -c "verify_image $(RELEASE_BIN_FILE)" -c "reset run" -c shutdown
	## this is for nucleo stlink
	#openocd -f interface/stlink-v2-1.cfg -f target/stm32f7x.cfg -c "reset_config srst_only connect_assert_srst" -c init -c "reset halt" -c halt -c "flash write_image erase $(RELEASE_BIN_FILE) 0x08000000" -c "verify_image $(RELEASE_BIN_FILE)" -c "reset run" -c shutdown


#connect: debug
	## this is stand alone stlink
	## openocd -f interface/stlink-v2.cfg -f target/stm32f7x_stlink.cfg -c init -c "reset init" -c halt -c "flash write_image erase $(RELEASE_BIN_FILE) 0x08000000" -c "verify_image $(RELEASE_BIN_FILE)" -c "reset run" -c shutdown
	## this is for nucleo stlink
	#openocd -f interface/stlink-v2-1.cfg -f target/stm32f7x.cfg -c init -c "reset init" -c halt -c "flash write_image erase $(RELEASE_BIN_FILE) 0x08000000" -c "verify_image $(RELEASE_BIN_FILE)" &
#>>>>>>> 7ce22243a5a59845c153b3d793ee480bc9de4175

gdb: connect
	arm-none-eabi-gdb --eval-command="target remote localhost:3333" --eval-command="monitor reset halt" $(DEBUG_ELF_FILE)
	#arm-none-eabi-gdb --eval-command="target remote localhost:3333" --eval-command="monitor reset halt" --eval-command="monitor arm semihosting enable"  $(DEBUG_ELF_FILE)

clean:
	$(RM) $(BIN_BASE_DIR)
	$(RM) $(DEPDIR)
	$(RM) $(GEN_DIR)

test:
	cd test/; make run

######################################
# Created autogenerated files
#######################################
$(GEN_DEPS):
	@mkdir -p $(GEN_DIR)
	$(DTC_FILES_GEN_SCRIPT) $(BOARD_NAME)
	$(CAN_FILES_GEN_SCRIPT) $(BOARD_NAME) F7

#$(DEPDIR)/%.d: ;
.PRECIOUS: $(DEPDIR)/%.d


#
# Include dependencies
#
include $(wildcard $(patsubst %,$(DEPDIR)/%.d, $(basename $(SRC))))
include $(shell mkdir -p Gen) $(wildcard Gen/*.d)
