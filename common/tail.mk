# Toolchain
CC  = arm-none-eabi-gcc
HEX = arm-none-eabi-objcopy
SZ  = arm-none-eabi-size

RM=rm -rf

# Global Variables
ELF_FILE = $(BOARD_NAME).elf
BIN_FILE = $(BOARD_NAME).bin
MAP_FILE = $(BOARD_NAME).map

RELEASE_BIN_DIR = $(BIN_DIR)/$(BOARD_NAME)/Release
RELEASE_BIN_FILE = $(RELEASE_BIN_DIR)/$(BIN_FILE)
RELEASE_ELF_FILE = $(RELEASE_BIN_DIR)/$(ELF_FILE)
RELEASE_MAP_FILE = $(RELEASE_BIN_DIR)/$(MAP_FILE)

SRC_DIR = $(BOARD_NAME)/Src
COMMON_LIB_DIR = common/
COMMON_F7_LIB_DIR = $(COMMON_LIB_DIR)/f7
COMMON_F0_LIB_DIR = $(COMMON_LIB_DIR)/f0
GITHOOKS_DIR = $(COMMON_LIB_DIR)/.githooks


GEN_DIR = Gen
GEN_BOARD_DIR = $(GEN_DIR)/$(BOARD_NAME)
GEN_INC_DIR = $(GEN_BOARD_DIR)/Inc
GEN_SRC_DIR = $(GEN_BOARD_DIR)/Src
SCRIPTS_DIR = $(COMMON_LIB_DIR)/Scripts
CAN_FILES_GEN_SCRIPT = $(SCRIPTS_DIR)/generateCANHeadder.py
DTC_FILES_GEN_SCRIPT = $(SCRIPTS_DIR)/generateDTC.py

CURRENT_DATE = \"$(shell date +%F_%T%Z)\"
CURRENT_TOP_BRANCH = \"$(shell git rev-parse --abbrev-ref HEAD)\"
CURRENT_HASH = \"$(shell git rev-parse HEAD)\"


COMMON_LIB_DATA_DIR = $(COMMON_LIB_DIR)/Data
DTC_CSV_FILE = $(COMMON_LIB_DATA_DIR)/dtc.csv
DBC_FILE = $(COMMON_LIB_DATA_DIR)/2018CAR.dbc


# Include STM32CubeMX autogenerated Makefile
ifeq ($(BOARD_ARCHITECTURE), NUCLEO_F7)
	include $(CUBE_NUCLEO_F7_MAKEFILE_PATH)/Cube-Lib.mk
else ifeq ($(BOARD_ARCHITECTURE), F7)
	include $(CUBE_F7_MAKEFILE_PATH)/Cube-Lib.mk
else ifeq ($(BOARD_ARCHITECTURE), NUCLEO_F0)
	include $(CUBE_NUCLEO_F0_MAKEFILE_PATH)/Cube-Lib.mk
else ifeq ($(BOARD_ARCHITECTURE), F0)
	include $(CUBE_F0_MAKEFILE_PATH)/Cube-Lib.mk
else
	$(error "Unsupported Board type: $(BOARD_ARCHITECTURE)")
endif

DEPDIR := .d
$(shell mkdir -p $(DEPDIR) >/dev/null)
DEPFLAGS = -MT $@ -MMD -MP -MF $(DEPDIR)/$*.Td

# Setup includes: flags, dirs
$(info $(C_INCLUDES))
INCLUDE_DIRS= $(COMMON_LIB_DIR)/Inc \
			  $(COMMON_F7_LIB_DIR)/Inc \
			  $(COMMON_F0_LIB_DIR)/Inc \
			  $(BOARD_NAME)/Inc \
			  $(F7_INC_DIR) \
			  $(GEN_INC_DIR)


INCLUDE_FLAGS := $(addprefix -I,$(INCLUDE_DIRS))
# add in driver dirs
INCLUDE_FLAGS += $(LIB_C_INCLUDES)
INCLUDE_FLAGS += $(LIB_AS_INCLUDES)

# Setup System defines
ifeq ($(BOARD_ARCHITECTURE), $(filter $(BOARD_ARCHITECTURE), NUCLEO_F7 F7))
DEFINES := "STM32F767xx"
else ifeq ($(BOARD_ARCHITECTURE), $(filter $(BOARD_ARCHITECTURE), NUCLEO_F0 F0))
DEFINES := "STM32F072xB"
else
	$(error "Unsupported Board type: $(BOARD_ARCHITECTURE)")
endif

DEFINES += BOARD_NAME=$(BOARD_NAME) BOARD_NAME_UPPER=$(BOARD_NAME_UPPER) BOARD_ID=ID_$(BOARD_NAME_UPPER) BOARD_TYPE_$(BOARD_ARCHITECTURE)=1 "USE_HAL_DRIVER" BOARD_VERSION=$(BOARD_VERSION)
DEFINE_FLAGS := $(addprefix -D,$(DEFINES))

# Setup Linker Flags
LINKER_FLAGS =$(LIB_LDFLAGS)
LINKER_FLAGS += -Wl,-Map=$(MAP_FILE_PATH),--cref
LINKER_FLAGS += -u_printf_float -u_scanf_float
LINKER_FLAGS += -Wl,--undefined=uxTopUsedPriority
LINKER_FLAGS += -z muldefs

# Assembler Flags
ASSEMBLER_FLAGS = -x assembler-with-cpp $(LIB_ASFLAGS)

# Compiler Flags
COMPILER_FLAGS = $(LIB_CFLAGS)
COMPILER_FLAGS += $(DEFINE_FLAGS) $(DEPFLAGS) -Werror
COMPILER_FLAGS += -D CUR_DATE=$(CURRENT_DATE)
COMPILER_FLAGS += -D CUR_TOP_BRANCH=$(CURRENT_TOP_BRANCH)
COMPILER_FLAGS += -D CUR_HASH=$(CURRENT_HASH)

POSTCOMPILE = @mv -f $(DEPDIR)/$*.Td $(DEPDIR)/$*.d && touch $@


# Setup Src *.c, *.asm files to build
SRC ?= $(wildcard $(SRC_DIR)/*.c) \
	   $(addprefix $(COMMON_LIB_DIR)/Src/, $(COMMON_LIB_SRC)) \
	   $(GEN_SRC_DIR)/$(BOARD_NAME)_can.c \
	   $(LIB_C_SOURCES)

SRCASM = $(LIB_ASM_SOURCES)

ifeq ($(BOARD_ARCHITECTURE), $(filter $(BOARD_ARCHITECTURE), NUCLEO_F7 F7))
   SRC += $(addprefix $(COMMON_F7_LIB_DIR)/Src/, $(COMMON_F7_LIB_SRC))
else ifeq ($(BOARD_TYPE), $(filter $(BOARD_TYPE), NUCLEO_F0 F0))
   SRC += $(addprefix $(COMMON_F0_LIB_DIR)/Src/, $(COMMON_F0_LIB_SRC))
else
	$(error "Unsupported Board type: $(BOARD_TYPE)")
endif

ifeq ($(BOARD_ARCHITECTURE), NUCLEO_F7)
   SRC += $(addprefix $(NUCLEO_F7_SRC_DIR)/, $(NUCLEO_F7_SRC))
else ifeq ($(BOARD_ARCHITECTURE), F7)
   SRC += $(addprefix $(F7_SRC_DIR)/, $(F7_SRC))
else ifeq ($(BOARD_ARCHITECTURE), NUCLEO_F0)
   SRC += $(addprefix $(NUCLEO_F0_SRC_DIR)/, $(NUCLEO_F0_SRC))
else ifeq ($(BOARD_ARCHITECTURE), F0)
   SRC += $(addprefix $(F0_SRC_DIR)/, $(F0_SRC))
else
	$(error "Unsupported Board type: $(BOARD_ARCHITECTURE)")
endif

ifeq ($(BOARD_NAME), bmu)
   SRC += $(GEN_SRC_DIR)/$(BOARD_NAME)_charger_can.c
endif

######################################
# Autogenerated code dependency files
######################################
GEN_FILES = $(GEN_SRC_DIR)/$(BOARD_NAME)_can.c \
	    $(GEN_INC_DIR)/$(BOARD_NAME)_can.h \
	    $(GEN_INC_DIR)/$(BOARD_NAME)_dtc.h

ifeq ($(BOARD_NAME), bmu)
   GEN_FILES += $(GEN_SRC_DIR)/$(BOARD_NAME)_charger_can.c
   GEN_FILES += $(GEN_INC_DIR)/$(BOARD_NAME)_charger_can.h
endif

#
# Initialization 
#
init:
	git config core.hooksPath $(GITHOOKS_DIR)
	git submodule init
	git submodule update

# Board Build
$(BOARD_NAME): MAP_FILE_PATH = $(RELEASE_MAP_FILE)
$(BOARD_NAME): BIN_FILE_PATH = $(RELEASE_BIN_FILE)
$(BOARD_NAME): ELF_FILE_PATH = $(RELEASE_ELF_FILE)
$(BOARD_NAME): $(RELEASE_BIN_FILE)

RELEASE_OBJS = $(SRC:%.c=$(RELEASE_BIN_DIR)/%.o) $(SRCASM:%.s=$(RELEASE_BIN_DIR)/%.o)

$(RELEASE_BIN_FILE): $(RELEASE_ELF_FILE)
	$(HEX) -O binary "$<" "$@"

$(RELEASE_ELF_FILE): $(RELEASE_OBJS)
	$(CC) $^ $(LINKER_FLAGS) -o $@
	$(SZ) $@



$(RELEASE_OBJS): | $(GEN_FILES)

# Build each object file
$(RELEASE_BIN_DIR)/%.o: %.c
	@mkdir -p $(dir $@)
	@mkdir -p $(dir $(DEPDIR)/$^)
	$(CC) $(COMPILER_FLAGS) $(INCLUDE_FLAGS) $< -o $@
	$(POSTCOMPILE)

$(RELEASE_BIN_DIR)/%.o: %.s
	@mkdir -p $(dir $@)
	$(CC) $(ASSEMBLER_FLAGS) $(INCLUDE_FLAGS) $< -o $@

$(RELEASE_BIN_DIR)/%.o: %.S
	@mkdir -p $(dir $@)
	$(CC) $(ASSEMBLER_FLAGS) $(INCLUDE_FLAGS) $< -o $@

clean:
	$(RM) $(BIN_DIR)
	$(RM) $(DEPDIR)
	$(RM) $(GEN_DIR)

######################################
# Created autogenerated files
#######################################

ifeq ($(BOARD_ARCHITECTURE), $(filter $(BOARD_ARCHITECTURE), NUCLEO_F7 F7))
F0_OR_F7 := "F7"
else ifeq ($(BOARD_ARCHITECTURE), $(filter $(BOARD_ARCHITECTURE), NUCLEO_F0 F0))
F0_OR_F7 := "F0"
else
	$(error "Unsupported Board type: $(BOARD_ARCHITECTURE)")
endif

autogen: $(GEN_FILES)

$(GEN_INC_DIR)/$(BOARD_NAME)_can.h: $(GEN_SRC_DIR)/$(BOARD_NAME)_can.c

$(GEN_SRC_DIR)/$(BOARD_NAME)_can.c: $(CAN_FILES_GEN_SCRIPT) $(DBC_FILE)
	@mkdir -p $(GEN_DIR)
	$(CAN_FILES_GEN_SCRIPT) $(BOARD_NAME) $(F0_OR_F7)

$(GEN_INC_DIR)/$(BOARD_NAME)_charger_can.h: $(GEN_SRC_DIR)/$(BOARD_NAME)_charger_can.c

$(GEN_SRC_DIR)/$(BOARD_NAME)_charger_can.c: $(GEN_SRC_DIR)/$(BOARD_NAME)_can.c

$(GEN_INC_DIR)/$(BOARD_NAME)_dtc.h: $(DTC_FILES_GEN_SCRIPT) $(DTC_FILE)
	@mkdir -p $(GEN_DIR)
	$(DTC_FILES_GEN_SCRIPT) $(BOARD_NAME)

#$(DEPDIR)/%.d: ;
.PRECIOUS: $(DEPDIR)/%.d


#
# Include dependencies
#
include $(wildcard $(patsubst %,$(DEPDIR)/%.d, $(basename $(SRC))))
include $(shell mkdir -p Gen) $(wildcard Gen/*.d)
